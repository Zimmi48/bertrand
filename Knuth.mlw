parameter n: int
parameter m,s,i,j:  int ref
parameter b: bool ref
parameter a : int array

external sqr : int -> int
external mod : int -> int -> int

logic one : bool -> int
logic pairZ : int,int -> prodZZ
logic In : int,int array,int,int -> prop
logic Zprime : int -> prop
logic Zodd : int -> prop
logic Zdivides : int,int -> prop

(** Knuth's program to compute the n first prime numbers *)
let Prime =
{ n > 0 and array_length(a)=n }
(begin
  m := 3;
  i := 1;
  a[0] := 2;
  while ((!i) < n) do 
    {invariant
      (a[i-1] < m and  m < 2*a[i-1]) and
      (0 < i and i <= n) and
      Zodd (m) and
      (forall k:int.
         (a[i-1] < k and k < m -> not(Zprime(k)))) and
      (forall k:int.
         (0 <= k and k < i -> Zprime(a[k]))) and
      (forall k:int. forall j:int.
         (0 <= k and k < j and j < i -> a[k] < a[j])) and
      (forall k:int.
         (0 <= k and k <= a[i-1] and Zprime(k)) -> In(k,a,0,i)) and
      array_length(a)=n
     variant pairZ(n-i, 2*a[i-1]-m) for lexZ }

    b:=true;
    s := (sqr !m);
    j := 0; 
    while (!b && a[!j] <= !s) do 
      {invariant
       (if (b) then
          (forall k:int.
            (0 <= k and k < j -> not(Zdivides(a[k],m))))
        else  Zdivides(a[j],m)) and
       (0 <= j and j < i)
       variant one(b)+i-j}

      if (mod !m a[!j]) = 0 then
          b:=false 
      else  
          j := !j + 1
    done 
    ;
    if (!b) then
      begin     
        a[!i] := !m;
        i:=!i+1
      end;
    m := !m+2
 done
end)
{(forall k:int.
   (0 <= k and k < n -> Zprime(a[k]))) and
 (forall k:int. forall j:int.
   (0 <= k and k < j and j < n -> a[k] < a[j])) and
 (forall k:int.
  (0 <= k and k <= a[n-1] and Zprime(k)) -> In(k,a,0,n))
}

